#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202305090019-git
# @@Author           :  Jason Hempstead
# @@Contact          :  git-admin@casjaysdev.pro
# @@License          :  LICENSE.md
# @@ReadME           :  run-os-update --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Nov 10, 2022 14:36 EST
# @@File             :  run-os-update
# @@Description      :  Update centos config files
# @@Changelog        :  newScript
# @@TODO             :  Refactor code
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202305090019-git"
HOME="${USER_HOME:-$HOME}"
USER="${SUDO_USER:-$USER}"
RUN_USER="${SUDO_USER:-$USER}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set bash options
trap 'exitCode=${exitCode:-$?};[ -n "$RUN_OS_UPDATE_TEMP_FILE" ] && [ -f "$RUN_OS_UPDATE_TEMP_FILE" ] && rm -Rf "$RUN_OS_UPDATE_TEMP_FILE" &>/dev/null' EXIT
[ "$1" = "--debug" ] && shift 1 && set -xo pipefail && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
[ "$1" = "--raw" ] && shift 1 && export SHOW_RAW="true"
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_remote_file() { curl -q -SLs "$1" | tee "$2" &>/dev/null || return 1; }
__backup_repo_files() { cp -Rf "/etc/yum.repos.d/." "$BACKUP_DIR" 2>/dev/null || return 0; }
__rm_repo_files() { [ "${1:-$YUM_DELETE}" = "yes" ] && rm -Rf "/etc/yum.repos.d"/* &>/dev/null || return 0; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__restore_repo_files() {
  [ -n "$(ls -A "$BACKUP_DIR/" 2>/dev/null)" ] || return 0
  cp -Rf "$BACKUP_DIR/${1:-}"* "/etc/yum.repos.d/" 2>/dev/null || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__yum() { yum "$@" $yum_opts -yy -q &>/dev/null || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__repo_file() {
  local statusCode="0"
  if [ "$RELEASE_TYPE" = "centos" ] && [ "$(hostname -s)" != "pbx" ]; then
    if [ "$RELEASE_VER" -ge "9" ]; then
      YUM_DELETE="no"
      RELEASE_FILE="https://github.com/rpm-devel/casjay-release/raw/main/casjay.rh9.repo"
    elif [ "$RELEASE_VER" -ge "8" ]; then
      YUM_DELETE="yes"
      RELEASE_FILE="https://github.com/rpm-devel/casjay-release/raw/main/casjay.rh8.repo"
    elif [ "$RELEASE_VER" -lt "8" ]; then
      YUM_DELETE="yes"
      RELEASE_FILE="https://github.com/rpm-devel/casjay-release/raw/main/casjay.rh.repo"
    else
      YUM_DELETE="no"
      RELEASE_FILE=""
    fi
  else
    return 0
  fi
  if [ -n "$RELEASE_FILE" ]; then
    yum clean all &>/dev/null
    __backup_repo_files
    __rm_repo_files "$YUM_DELETE"
    __save_remote_file "$RELEASE_FILE" "/etc/yum.repos.d/casjay.repo"
    [ -n "$(type -P crb)" ] && crb enable &>/dev/null
    if [ "$ARCH" != "x86_64" ]; then
      sed -i 's|http://cdn.remirepo.net/enterprise/$releasever/safe/$basearch/mirror|https://github.com/rpm-devel/casjay-release/raw/main/ZREPO/RHEL/mirrors/remi|g' /etc/yum.repos.d/casjay.repo
      sed -i 's|https://rpms.remirepo.net/enterprise/$releasever/php74/$basearch/mirror|https://github.com/rpm-devel/casjay-release/raw/main/ZREPO/RHEL/mirrors/remi|g' /etc/yum.repos.d/casjay.repo
    fi
    __yum makecache &>/dev/null || statusCode=1
  fi
  return $statusCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_updater() {
  local url="$1" file="$2"
  curl -q -LSsf "$url/$file" -o "/tmp/$file" 2>/dev/null && true || return 1
  [ -f "/tmp/$file" ] && chmod -Rf 755 "/tmp/$file" && mv -f "/tmp/$file" "/root/.local/bin/$file"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$USER" = "root" ] || [ "$EUID" = 0 ] || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
echo "$PATH" | grep -q "/root/.local/bin" || export PATH="/root/.local/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DATE="$(date +'%y-%m-%d at %H:%M')"
ARCH="$(uname -m | tr '[:upper:]' '[:lower:]')"
BACKUP_DIR="$HOME/Documents/backups/$(date +'%Y/%m/%d')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export FORCE_INST="${FORCE_INST:-}"
export TIME_ZONE="${TZ:-America/New_York}"
export STATICSITE="${STATICSITE:-$(hostnamecli -f)}"
export SERVICES_ENABLE="httpd nginx munin-node cockpit postfix "
export SERVICES_ENABLE+="uptimed downtimed php-fpm proftpd rsyslog chronyd snmpd cockpit "
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export SERVICES_DISABLE="firewalld auditd kdump iscsid.socket lvm2-lvmpolld.socket lvm2-monitor "
export SERVICES_DISABLE+="iscsi.service iscsiuio.socket lvm2-lvmetad.socket radvd "
export SERVICES_DISABLE+="fail2ban shorewall shorewall6 named dhcpd dhcpd6 mdmonitor "
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export INSTALLED_VERSION="$(head -n1 <"/etc/casjaysdev/updates/versions/configs.txt" 2>/dev/null)"
export REMOTE_VERSION="$(curl -q -LSsf "https://github.com/casjay-base/centos/raw/main/version.txt" | head -n1)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export RELEASE_VER="$(grep --no-filename -s 'VERSION_ID=' /etc/*-release | awk -F '=' '{print $2}' | sed 's#"##g' | awk -F '.' '{print $1}' | grep '^')"
export RELEASE_NAME="$(grep --no-filename -s '^NAME=' /etc/*-release | awk -F'=' '{print $2}' | sed 's|"||g;s| .*||g' | tr '[:upper:]' '[:lower:]' | grep '^')"
export RELEASE_TYPE="$(grep --no-filename -s '^ID_LIKE=' /etc/*-release | awk -F'=' '{print $2}' | sed 's|"||g' | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | grep 'centos' | grep '^')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
hostnamefull="$(hostname -f 2>/dev/null || echo "$HOSTNAME")"
hostnameshort="$(hostname -s 2>/dev/null || echo "$HOSTNAME")"
domainname="$(echo "$hostnamefull" | awk -F'.' '{$1="";OFS="."; print $0}' | grep -v '^$' | sed 's|^\.||g;s|^ /*||g;s| |.|g' | grep '^' || echo 'local')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$ARCH" = "x86_64" ] || yum_opts="--disablerepo casjay-remi-php,casjay-remi-safe"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
{ [ "$1" = "--force" ] || [ -n "$FORCE_INST" ]; } && shift 1 && FORCE_INST="true" || FORCE_INST=""
{ [ "$1" = "--version" ] || [ "$1" = "-v" ] || [ "$1" = "version" ]; } && shift 1 && echo "$INSTALLED_VERSION" && exit
{ [ "$1" = "--scripts" ] || [ "$1" = "-s" ] || [ "$1" = "scripts" ] || [ "$1" = "script" ]; } && shift 1 && SCRIPTS_UPDATE="true"
{ [ "$1" = "--check" ] || [ "$1" = "-c" ] || [ "$1" = "check" ]; } && shift 1 && echo "Old version is $INSTALLED_VERSION and new version is $REMOTE_VERSION" && exit
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
chattr -i /etc/hosts &>/dev/null
chattr -i /etc/resolv.conf &>/dev/null
[ -f "/etc/nginx/vhosts.d/default.conf" ] && chattr -i /etc/nginx/vhosts.d/default.conf &>/dev/null
[ -f "/etc/httpd/conf/vhosts.d/000-default.conf" ] && chattr -i /etc/httpd/conf/vhosts.d/000-default.conf &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -w "/etc/resolv.conf" ]; then
  printf '%s\n%s\n%s\n' "search casjay.in" "nameserver 1.1.1.1" "nameserver 8.8.8.8" | tee "/etc/resolv.conf" &>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$SCRIPTS_UPDATE" = "true" ]; then
  exitCode="0"
  RAW_REPO_URL="https://raw.githubusercontent.com/casjay-base/centos/main/root/.local/bin"
  API_FILE_URL="https://api.github.com/repos/casjay-base/centos/contents/root/.local/bin?ref=main"
  file_list="$(curl -q -LSsf "$API_FILE_URL" | jq -r '.[].url' | awk -F '?' '{print $1}')"
  if [ "$REMOTE_VERSION" = "$INSTALLED_VERSION" ]; then
    echo "Reinstalling from version $INSTALLED_VERSION"
  else
    echo "Updating scripts to version $REMOTE_VERSION from $INSTALLED_VERSION"
  fi
  for file in $file_list; do
    filename="$(basename "$file")"
    echo "Updating $filename in /root/.local/bin"
    __run_updater "$RAW_REPO_URL" "$filename" || exitCode=$(($exitCode + 1))
  done
  __run_updater "$RAW_REPO_URL" "run-os-update" || exitCode=$(($exitCode + 1))
  exit $exitCode
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "repo" ]; then
  echo "Updating casjay.repo file"
  __repo_file && echo "Update completed" || { echo "Update has failed" && false; }
  exit $?
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ $# -eq 0 ] || shift $#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$FORCE_INST" ] && [ "$REMOTE_VERSION" = "$INSTALLED_VERSION" ]; then
  echo -e "There is no update available: $REMOTE_VERSION"
  exit
else
  echo -e "\nUpdating to version $REMOTE_VERSION from $INSTALLED_VERSION"
  echo -e "Running the automatic update script for $RELEASE_TYPE"
  echo -e "Press control+c now to cancel update\n"
  sleep 10
  mkdir -p "$BACKUP_DIR" &>/dev/null

  echo -e "Setting Timezone to $TIME_ZONE"
  [ -f "/etc/timezone" ] || echo "$TIME_ZONE" >/etc/timezone
  [ -f "/etc/localtime" ] || ln -sf "/usr/share/zoneinfo/$TIME_ZONE" "/etc/localtime"
  echo -e "Done Setting up Timezone\n"

  echo -e "Setting version"
  mkdir -p "/etc/casjaysdev/updates/versions"
  echo -e "$REMOTE_VERSION" >"/etc/casjaysdev/updates/versions/configs.txt"
  date +'%b %d, %Y at %H:%M' >"/etc/casjaysdev/updates/versions/date.configs.txt"
  chmod -Rf 664 /etc/casjaysdev/updates/versions/*.txt
  echo -e "Done setting version\n"

  echo -e "Updating yum repos for $RELEASE_NAME $RELEASE_VER - $ARCH"
  if ! __repo_file; then
    echo -e "Failed to update the repos\n"
    exit 1
  fi
  echo -e "Done updating yum repos for $RELEASE_NAME $RELEASE_VER\n"

  echo -e "Setting up packages - this may take some time!"
  __yum update &>/dev/null
  if [ -f "/etc/nginx/vhosts.d/default.conf" ]; then
    mv -f "/etc/nginx/vhosts.d/default.conf" "/etc/nginx/vhosts.d/0000-default.conf"
  fi
  echo -e "Done with package installation\n"

  echo -e "Updating systemmgr config"
  if [ -d "/usr/local/share/CasjaysDev/scripts/.git" ]; then
    git -C "/usr/local/share/CasjaysDev/scripts" reset --hard -q
    git -C "/usr/local/share/CasjaysDev/scripts" pull -q
  else
    git clone -q "https://github.com/casjay-dotfiles/scripts" "/usr/local/share/CasjaysDev/scripts"
  fi
  bash -c "systemmgr update scripts ssl ssh" &>/dev/null
  echo -e "Done updating systemmgr configs\n"

  echo -e "Removing old files "
  rm -Rf /etc/named* /var/named/* /etc/ntp* /etc/cron*/0* /etc/cron*/dailyjobs &>/dev/null
  rm -Rf /var/ftp/uploads /etc/httpd/conf.d/ssl.conf /tmp/configs /etc/samba/*.example &>/dev/null
  echo -e "Done removing old files\n"

  echo -e "Setting up vnstat-php-frontend"
  if [ -d "/var/www/html/vnstat/.git" ]; then
    git -C "/var/www/html/vnstat" reset --hard -q
    git -C "/var/www/html/vnstat" pull -q
  else
    [ -d "/var/www/html/vnstat" ] && rm -Rf "/var/www/html/vnstat"
    git clone -q "https://github.com/solbu/vnstat-php-frontend" "/var/www/html/vnstat"
  fi
  echo -e "Done setting up vnstat-php-frontend\n"

  echo -e "Setting up phpsysinfo"
  if [ -d "/var/www/html/sysinfo/.git" ]; then
    git -C "/var/www/html/sysinfo" reset --hard -q
    git -C "/var/www/html/sysinfo" pull -q
  else
    [ -d "/var/www/html/sysinfo" ] && rm -Rf "/var/www/html/sysinfo"
    git clone -q "https://github.com/phpsysinfo/phpsysinfo" "/var/www/html/sysinfo"
  fi
  echo -e "Done setting up phpsysinfo\n"

  echo -e "Setting up configs"
  [ -d "/tmp/configs" ] && rm -Rf "/tmp/configs"
  git clone -q "https://github.com/casjay-base/centos" "/tmp/configs"
  echo -e "Done Setting up configs\n"

  echo -e "Configuring files"
  rm -Rf /tmp/configs/var/named*
  rm -Rf /tmp/configs/etc/sysconfig/network-scripts
  rm -Rf /tmp/configs/etc/{hosts,tor,cockpit,fail2ban,shorewall,shorewall6,samba,postfix,named*}
  mkdir -p "/etc/rsync.d"

  find -L /tmp/configs -type f -iname "*.sh" -exec chmod 755 {} \; &>/dev/null
  find -L /tmp/configs -type f -iname "*.pl" -exec chmod 755 {} \; &>/dev/null
  find -L /tmp/configs -type f -iname "*.cgi" -exec chmod 755 {} \; &>/dev/null
  find -L /tmp/configs -type f -exec sed -i "s#myserverdomainname#$hostnamefull#g" {} \; &>/dev/null
  find -L /tmp/configs -type f -exec sed -i "s#myhostnameshort#$hostnameshort#g" {} \; &>/dev/null
  find -L /tmp/configs -type f -exec sed -i "s#mydomainname#$domainname#g" {} \; &>/dev/null

  cp -Rf /tmp/configs/{etc,root,usr,var}* / 2>/dev/null

  if grep -qs "named:" "/etc/passwd"; then
    mkdir -p /var/log/named && chown -Rf named:named /etc/named* /var/named /var/log/named
  fi

  if [ -f "/etc/sysconfig/network" ]; then
    sed -i "s#mydomain#$domainname#g" /etc/sysconfig/network
    sed -i "s#myserverdomainname#$HOSTNAME#g" /etc/sysconfig/network
  fi

  if grep '^kernel.domainname' '/etc/sysctl.conf'; then
    sed -i 's|kernel.domainname=.*|kernel.domainname='$domainname'|g' /etc/sysctl.conf
  else
    echo -e "kernel.domainname=$domainname" >>/etc/sysctl.conf
  fi

  chmod 644 -Rf /etc/cron.d/* /etc/logrotate.d/*

  if [ -d "/usr/share/munin/plugins" ]; then
    chmod 755 -Rf "/usr/share/munin/plugins"/*
  fi

  if [ -d "/etc/postfix" ]; then
    if [ -f "/etc/postfix/.installed" ]; then
      echo -e "Last updated on $DATE" >"/etc/postfix/.installed"
    else
      echo -e "Installed on $DATE" >"/etc/postfix/.installed"
    fi
    touch "/etc/postfix/sasl_passwd"
    touch "/etc/postfix/mydomains.pcre"
    touch "/etc/aliases" && newaliases
    postmap="access canonical relocated transport virtual sasl_passwd"
    for f in $postmap; do postmap /etc/postfix/$f &>/dev/null; done
  fi

  chattr +i "/etc/resolv.conf"
  rm -Rf /tmp/*.tar "/tmp/dotfiles" "/tmp/configs" "/root/bin/linuxcounter.sh"
  echo -e "Done configuring files\n"

  echo -e "Setting up web server"
  bash -c "$(curl -q -LSsf "https://github.com/casjay-templates/default-web-assets/raw/main/setup.sh")"
  if [ -f "/var/lib/tor/hidden_service/default/hostname" ]; then
    cat "/var/lib/tor/hidden_service/*/hostname" >"/var/www/html/tor_hostname" 2>/dev/null
  fi
  if grep -qs "^apache:" "/etc/passwd"; then
    chown -Rf apache:apache "/var/www" "/usr/share/httpd"
  fi
  echo -e "Done setting up web server\n"

  if [ -f "$HOME/.local/dotfiles/personal/install.sh" ]; then
    echo -e "Updating personal dotfiles"
    bash -c "$HOME/.local/dotfiles/personal/install.sh" &>/dev/null
    echo -e "dotfiles have been updated\n"
  fi

  echo -e "Setting up the ssl certs"
  [ -f "/etc/named/certbot-update.conf" ] && chmod 600 /etc/named/certbot-update.conf
  if [ -d "/etc/letsencrypt/live/domain" ]; then
    cat "/etc/letsencrypt/live/domain/fullchain.pem" >"/etc/cockpit/ws-certs.d/1-my-cert.cert"
    cat "/etc/letsencrypt/live/domain/privkey.pem" >>"/etc/cockpit/ws-certs.d/1-my-cert.cert"
  fi
  update-ca-trust && update-ca-trust extract
  echo -e "Done setting up the ssl certs\n"

  echo -e "Setting up ip addresses"
  bash -c "/root/.local/bin/root_changeip.sh"
  echo -e "Done setting up ip addresses\n"

  echo -e "Updating motd and issue files"
  mkdir -p /etc/casjaysdev/banners &>/dev/null
  chmod -f 777 /etc/casjaysdev /etc/casjaysdev/banners/ /etc/casjaysdev/banners/* &>/dev/null
  bash -c "/usr/local/share/CasjaysDev/scripts/bin/update-motd" &>/dev/null
  echo -e "Done updating motd and issue files \n"

  echo -e "Setting up the services"
  for s in $SERVICES_ENABLE; do systemctl enable --now "$s" &>/dev/null; done
  for s in $SERVICES_ENABLE; do systemctl restart "$s" &>/dev/null; done
  for s in $SERVICES_DISABLE; do systemctl disable "$s" &>/dev/null; done
  echo -e "Done setting up the services\n"

  if [ -f "$HOME/dns/docker.sh" ]; then
    echo -e "Setting up the dns server"
    bash -c "$HOME/dns/docker.sh"
    echo -e "done setting up the dns server\n"
  elif [ -f "$HOME/dns/master/update.sh" ]; then
    echo -e "Setting up the dns server"
    git -C "$HOME/dns" pull -q &>/dev/null
    cp -Rf "$HOME/dns" "/tmp/dns-update"
    rm -Rf "/tmp/dns-update/master/etc/tor"
    rm -Rf "/tmp/dns-update/master/etc/nginx"
    rm -Rf "/tmp/dns-update/master/etc/httpd"
    bash -c "/tmp/dns-update/master/update.sh"
    systemctl enable --now named &>/dev/null
    echo -e "done setting up the dns server\n"
  fi

  echo -e "Cleaning up files and history"
  rm -Rf "/tmp/dns-update"
  bash -c "/root/.local/bin/root_clean.sh" &>/dev/null
  echo -e "Updated to version $REMOTE_VERSION from $INSTALLED_VERSION"
  echo -e "Last updated on $DATE" >"/var/log/run_update"
  echo -e "Done updating system\n\n"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
