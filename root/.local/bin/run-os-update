#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202211081932-git
# @@Author           :  Jason Hempstead
# @@Contact          :  git-admin@casjaysdev.com
# @@License          :  LICENSE.md
# @@ReadME           :  run-os-update --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Nov 10, 2022 14:36 EST
# @@File             :  run-os-update
# @@Description      :  Update centos config files
# @@Changelog        :  newScript
# @@TODO             :  Refactor code
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202211081932-git"
HOME="${USER_HOME:-$HOME}"
USER="${SUDO_USER:-$USER}"
RUN_USER="${SUDO_USER:-$USER}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set bash options
trap 'exitCode=${exitCode:-$?};[ -n "$RUN_OS_UPDATE_TEMP_FILE" ] && [ -f "$RUN_OS_UPDATE_TEMP_FILE" ] && rm -Rf "$RUN_OS_UPDATE_TEMP_FILE" &>/dev/null' EXIT
[ "$1" = "--debug" ] && shift 1 && set -xo pipefail && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
[ "$1" = "--raw" ] && shift 1 && export SHOW_RAW="true"
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$USER" = "root" ] || [ "$EUID" = 0 ] || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
echo "$PATH" | grep -q "/root/.local/bin" || export PATH="/root/.local/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DATE="$(date +'%y-%m-%d at %H:%M')"
export TIME_ZONE="${TZ:-America/New_York}"
export STATICSITE="${STATICSITE:-(hostnamecli -f)}"
export SERVICES_ENABLE="tor httpd nginx smb nmb munin-node cockpit postfix "
export SERVICES_ENABLE+="uptimed downtimed php-fpm proftpd rsyslog chronyd snmpd cockpit "
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export SERVICES_DISABLE="firewalld auditd kdump iscsid.socket lvm2-lvmpolld.socket lvm2-monitor "
export SERVICES_DISABLE+="iscsi.service iscsiuio.socket lvm2-lvmetad.socket radvd "
export SERVICES_DISABLE+="fail2ban shorewall shorewall6 named dhcpd dhcpd6 mdmonitor "
export FORCE_INST="${FORCE_INST:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export CURR_VERSION="$(head -n1 <"/etc/casjaysdev/updates/versions/configs.txt" 2>/dev/null)"
export VERSION="$(curl -q -LSsf "https://github.com/casjay-base/centos/raw/main/version.txt" | head -n1)"
RELEASE_VER="$(grep --no-filename -s 'VERSION_ID=' /etc/*-release | awk -F '=' '{print $2}' | sed 's#"##g' | awk -F '.' '{print $1}' | grep '^')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
hostnamefull="$(hostname -f 2>/dev/null || echo "$HOSTNAME")"
hostnameshort="$(hostname -s 2>/dev/null || echo "$HOSTNAME")"
domainname="$(echo "$hostnamefull" | awk -F'.' '{$1="";OFS="."; print $0}' | grep -v '^$' | sed 's|^\.||g;s|^ /*||g;s| |.|g' | grep '^' || echo 'local')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
{ [ "$1" = "--force" ] || [ -n "$FORCE_INST" ]; } && shift 1 && FORCE_INST="true" || FORCE_INST=""
{ [ "$1" = "--version" ] || [ "$1" = "-v" ] || [ "$1" = "version" ]; } && shift 1 && echo "$CURR_VERSION" && exit
{ [ "$1" = "--check" ] || [ "$1" = "-c" ] || [ "$1" = "check" ]; } && shift 1 && echo "Old version is $CURR_VERSION and new version is $VERSION" && exit
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "/etc/resolv.conf" ] || echo "nameserver 1.1.1.1" >"/etc/resolv.conf"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$1" = "scripts" ]; then
  exitCode="0"
  RAW_URL="https://raw.githubusercontent.com/casjay-base/centos/main/root/.local/bin"
  for f in root_certbot.sh root_changeip.sh root_clean.sh root_dhparams.sh run-os-update update-resolv.sh; do
    curl -q -LSsf "$RAW_URL/$f" -o "/tmp/$f" 2>/dev/null && true || { exitCode=$(($exitCode + 1)) && false; }
    [ -f "/tmp/$f" ] && chmod -Rf 755 "/tmp/$f" && mv -f "/tmp/$f" "/root/.local/bin/$f"
  done
  exit $exitCode
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ $# -ne 0 ] || shift $#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$FORCE_INST" ] && [ "$VERSION" = "$CURR_VERSION" ]; then
  echo -e "There is no update available: $VERSION"
  exit
else
  echo -e "\nUpdating to version $VERSION from $CURR_VERSION"
  echo -e "Running the automatic update script"
  echo -e "Press control+c now to cancel update\n"
  sleep 10

  echo -e "Setting Timezone to $TIME_ZONE"
  [ -f "/etc/timezone" ] || echo "$TIME_ZONE" >/etc/timezone
  [ -f "/etc/localtime" ] || ln -sf "/usr/share/zoneinfo/$TIME_ZONE" "/etc/localtime"
  echo -e "Done Setting up Timezone\n"

  echo -e "Setting version"
  mkdir -p "/etc/casjaysdev/updates/versions"
  echo -e "$VERSION" >"/etc/casjaysdev/updates/versions/configs.txt"
  date +'%b %d, %Y at %H:%M' >"/etc/casjaysdev/updates/versions/date.configs.txt"
  chmod -Rf 664 /etc/casjaysdev/updates/versions/*.txt
  echo -e "Done setting version\n"

  echo -e "Setting up packages - this may take some time!"
  yum update -yy -q &>/dev/null
  chattr -i /etc/resolv.conf &>/dev/null
  chattr -i /etc/nginx/vhosts.d/default.conf &>/dev/null
  chattr -i /etc/httpd/conf/vhosts.d/000-default.conf &>/dev/null
  if [ -f "/etc/nginx/vhosts.d/default.conf" ]; then
    mv -f "/etc/nginx/vhosts.d/default.conf" "/etc/nginx/vhosts.d/0000-default.conf"
  fi
  echo -e "Done with package installation\n"

  echo -e "Updating systemmgr config"
  if [ -d "/usr/local/share/CasjaysDev/scripts/.git" ]; then
    git -C "/usr/local/share/CasjaysDev/scripts" pull -q
  else
    git clone -q "https://github.com/casjay-dotfiles/scripts" "/usr/local/share/CasjaysDev/scripts"
  fi
  bash -c "systemmgr update scripts ssl ssh" &>/dev/null
  echo -e "Done updating systemmgr configs\n"

  echo -e "Removing old files "
  rm -Rf /etc/named* /var/named/* /etc/ntp* /etc/cron*/0* /etc/cron*/dailyjobs &>/dev/null
  rm -Rf /var/ftp/uploads /etc/httpd/conf.d/ssl.conf /tmp/configs /etc/samba/*.example &>/dev/null
  echo -e "Done removing old files\n"

  echo -e "Setting up phpsysinfo"
  if [ -d "/var/www/html/sysinfo/.git" ]; then
    git -C "/var/www/html/sysinfo" pull -q
  else
    [ -d "/var/www/html/sysinfo" ] && rm -Rf "/var/www/html/sysinfo"
    git clone -q "https://github.com/phpsysinfo/phpsysinfo" "/var/www/html/sysinfo"
  fi
  echo -e "Done setting up phpsysinfo\n"

  echo -e "Setting up configs"
  [ -d "/tmp/configs" ] && rm -Rf "/tmp/configs"
  git clone -q "https://github.com/casjay-base/centos" "/tmp/configs"
  echo -e "Done Setting up configs\n"

  echo -e "Configuring files"
  rm -Rf /tmp/configs/var/named*
  rm -Rf /tmp/configs/etc/sysconfig/network-scripts
  rm -Rf /tmp/configs/etc/{tor,cockpit,fail2ban,shorewall,shorewall6,samba,postfix,named*}

  find -L /tmp/configs -type f -iname "*.sh" -exec chmod 755 {} \; &>/dev/null
  find -L /tmp/configs -type f -iname "*.pl" -exec chmod 755 {} \; &>/dev/null
  find -L /tmp/configs -type f -iname "*.cgi" -exec chmod 755 {} \; &>/dev/null
  find -L /tmp/configs -type f -exec sed -i "s#myserverdomainname#$hostnamefull#g" {} \; &>/dev/null
  find -L /tmp/configs -type f -exec sed -i "s#myhostnameshort#$hostnameshort#g" {} \; &>/dev/null
  find -L /tmp/configs -type f -exec sed -i "s#mydomainname#$domainname#g" {} \; &>/dev/null

  cp -Rf /tmp/configs/{etc,root,usr,var}* / 2>/dev/null

  mkdir -p /etc/rsync.d /var/log/named && chown -Rf named:named /etc/named* /var/named /var/log/named

  sed -i "s#myserverdomainname#$HOSTNAME#g" /etc/sysconfig/network
  sed -i "s#mydomain#$domainname#g" /etc/sysconfig/network

  if grep '^kernel.domainname' '/etc/sysctl.conf'; then
    sed -i 's|kernel.domainname=.*|kernel.domainname='$domainname'|g' /etc/sysctl.conf
  else
    echo -e "kernel.domainname=$domainname" >>/etc/sysctl.conf
  fi

  chmod 644 -Rf /etc/cron.d/* /etc/logrotate.d/*

  if [ -d "/usr/share/munin/plugins" ]; then
    chmod 755 -Rf "/usr/share/munin/plugins"
  fi

  if [ -d "/etc/postfix" ]; then
    if [ ! -f "/etc/postfix/.installed" ]; then
      touch /etc/postfix/mydomains.pcre
      postmap /etc/postfix/transport /etc/postfix/canonical /etc/postfix/virtual /etc/postfix/mydomains
      newaliases
      chattr +i "/etc/resolv.conf"
    fi
    echo -e "Last updated on $DATE" >"/etc/postfix/.installed"
  fi

  rm -Rf /tmp/*.tar "/tmp/dotfiles" "/tmp/configs" "/root/bin/linuxcounter.sh"
  echo -e "Done configuring files\n"

  echo -e "Setting up web server"
  bash -c "$(curl -q -LSs "https://github.com/casjay-templates/default-web-assets/raw/main/setup.sh")"
  if [ -f "/var/lib/tor/hidden_service/hostname" ]; then
    cp -Rf "/var/lib/tor/hidden_service/hostname" "/var/www/html/tor_hostname"
  fi
  chown -Rf apache:apache "/var/www" "/usr/share/httpd"
  echo -e "Done setting up web server\n"

  if [ -f "$HOME/.local/dotfiles/personal/install.sh" ]; then
    echo -e "Updating personal dotfiles"
    bash -c "$HOME/.local/dotfiles/personal/install.sh" &>/dev/null
    echo -e "dotfiles have been updated\n"
  fi

  echo -e "Setting up the ssl certs"
  [ -f "/etc/named/certbot-update.conf" ] && chmod 600 /etc/named/certbot-update.conf
  if [ -d /etc/letsencrypt/live/domain ]; then
    cat /etc/letsencrypt/live/domain/fullchain.pem >/etc/cockpit/ws-certs.d/1-my-cert.cert
    cat /etc/letsencrypt/live/domain/privkey.pem >>/etc/cockpit/ws-certs.d/1-my-cert.cert
  fi
  update-ca-trust && update-ca-trust extract
  echo -e "Done setting up the ssl certs\n"

  echo -e "Setting up ip addresses"
  bash -c "/root/.local/bin/root_changeip.sh"
  echo -e "Done setting up ip addresses\n"

  echo -e "Updating motd and issue files"
  mkdir -p /etc/casjaysdev/banners &>/dev/null
  chmod -f 777 /etc/casjaysdev /etc/casjaysdev/banners/ /etc/casjaysdev/banners/* &>/dev/null
  bash -c "update-motd" &>/dev/null
  echo -e "Done updating motd and issue files \n"

  echo -e "Setting up the services"
  for s in $SERVICES_ENABLE; do systemctl enable "$s" &>/dev/null; done
  for s in $SERVICES_ENABLE; do systemctl restart "$s" &>/dev/null; done
  for s in $SERVICES_DISABLE; do systemctl disable "$s" &>/dev/null; done
  echo -e "Done setting up the services\n"

  if [ -f "$HOME/dns/master/update.sh" ]; then
    echo -e "Setting up the dns server"
    git -C "$HOME/dns" pull -q &>/dev/null
    cp -Rf "$HOME/dns" "/tmp/dns-update"
    rm -Rf "/tmp/dns-update/master/etc/tor"
    rm -Rf "/tmp/dns-update/master/etc/nginx"
    rm -Rf "/tmp/dns-update/master/etc/httpd"
    bash -c "/tmp/dns-update/master/update.sh"
    rm -Rf "/tmp/dns-update"
    systemctl enable --now named &>/dev/null
    echo -e "done setting up the dns server\n"
  fi

  echo -e "Cleaning up files and history"
  bash -c "/root/.local/bin/root_clean.sh" &>/dev/null
  echo -e "Updated to version $VERSION from $CURR_VERSION"
  echo -e "Last updated on $DATE" >"/var/log/run_update"
  echo -e "Done updating system\n\n"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit ${?:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
