#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202201210244-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : run-os-update --help
# @Copyright     : Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @Created       : Friday, Jan 21, 2022 03:01 EST
# @File          : run-os-update
# @Description   : Update centos config files
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202201210244-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set bash options
if [[ "$1" == "--debug" ]]; then shift 1 && set -xo pipefail && export SCRIPT_OPTS="--debug" && export _DEBUG="on"; fi
trap 'exitCode=${exitCode:-$?};[ -n "$RUN_OS_UPDATE_TEMP_FILE" ] && [ -f "$RUN_OS_UPDATE_TEMP_FILE" ] && rm -Rf "$RUN_OS_UPDATE_TEMP_FILE" &>/dev/null' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$USER" == "root" ] || [ "$EUID" = 0 ] || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
echo "$PATH" | grep -q "/root/.local/bin" || export PATH="/root/.local/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export TIME_ZONE="${TZ:-America/New_York}"
export STATICSITE="${STATICSITE:-(hostnamecli -f)}"
export SERVICES_ENABLE="tor httpd nginx smb nmb munin-node cockpit postfix "
export SERVICES_ENABLE+="uptimed downtimed php-fpm proftpd rsyslog "
export SERVICES_ENABLE+="chronyd snmpd cockpit.socket "
export SERVICES_DISABLE="firewalld auditd kdump iscsid.socket lvm2-lvmpolld.socket lvm2-monitor "
export SERVICES_DISABLE+="iscsi.service iscsiuio.socket lvm2-lvmetad.socket radvd "
export SERVICES_DISABLE+="fail2ban shorewall shorewall6 named dhcpd dhcpd6 mdmonitor "
export FORCE_INST="${FORCE_INST:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export CURR_VERSION="$(cat "/etc/casjaysdev/updates/versions/configs.txt" 2>/dev/null)"
export VERSION="$(curl -q -LSsf "https://github.com/casjay-base/centos/raw/main/version.txt")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
domainname="$(hostname -f | awk -F. '{$1="";OFS="." ; print $0}' | grep -v '^$' | grep '^' || echo 'local')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
{ [ "$1" = "--force" ] || [ -n "$FORCE_INST" ]; } && FORCE_INST="true" || FORCE_INST=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$FORCE_INST" ] && [ "$VERSION" = "$CURR_VERSION" ]; then
  echo "There is no update available: $VERSION"
  exit 0
else
  echo -e "\nThis is version $VERSION"
  echo -e "Running the automatic update script"
  echo -e "Your system will restart when done"
  echo -e "Press control+c now to cancel update"
  sleep 10
  echo -e "\n\nUpdating the system!\n\n"
  sleep 1
  echo -e "Setting up Timezone"
  [ -f "/etc/timezone" ] || echo "$TIME_ZONE" >/etc/timezone
  [ -f "/etc/localtime" ] || ln -sf "/usr/share/zoneinfo/$TIME_ZONE" /etc/localtime
  echo -e "Done Setting up Timezone\n"

  echo -e "Setting up packages - this may take some time!"
  mkdir -p /etc/casjaysdev/updates/versions
  echo "$VERSION" >/etc/casjaysdev/updates/versions/configs.txt
  chmod -Rf 664 /etc/casjaysdev/updates/versions/configs.txt

  chattr -i /etc/resolv.conf >/dev/null 2>&1
  chattr -i /etc/nginx/vhosts.d/default.conf >/dev/null 2>&1
  chattr -i /etc/httpd/conf/vhosts.d/000-default.conf >/dev/null 2>&1

  if [ -f /etc/nginx/vhosts.d/default.conf ]; then
    mv -f /etc/nginx/vhosts.d/default.conf /etc/nginx/vhosts.d/0000-default.conf
  fi

  # wget -q "https://github.com/pkmgr/centos/raw/main/lists/default.list" -O /tmp/default-packages.txt
  # yum install -y --quiet $(cat /tmp/default-packages.txt) --skip-broken >/dev/null 2>&1
  echo -e "Done with package installation\n"

  if [ -d /tmp/dotfiles ]; then
    echo -e "Updating the dotfiles"
    rm -Rf /tmp/dotfiles
    echo -e "dotfiles have been updated\n"
  fi

  echo -e "Now updating the system files\n"
  rm -Rf /etc/named* /var/named/* /etc/ntp* /etc/cron*/0* /etc/cron*/dailyjobs /var/ftp/uploads /etc/httpd/conf.d/ssl.conf /tmp/configs /etc/samba/*.example &>/dev/null
  echo -e "Setting up phpsysinfo"
  if [ -d "/var/www/html/sysinfo/.git" ]; then
    git -C "/var/www/html/sysinfo" pull -q
  else
    [ -d "/var/www/html/sysinfo" ] && rm -Rf "/var/www/html/sysinfo"
    git clone "https://github.com/phpsysinfo/phpsysinfo" "/var/www/html/sysinfo"
  fi
  echo -e "Done setting up phpsysinfo\n"

  echo -e "Setting up configs"
  [ -d "/tmp/configs" ] && rm -Rf "/tmp/configs"
  git clone -q "https://github.com/casjay-base/centos" "/tmp/configs"
  echo -e "Done Setting up configs\n"

  echo -e "Configuring files"
  rm -Rf /tmp/configs/etc/{tor,cockpit,fail2ban,shorewall,shorewall6,samba,postfix,named*}
  rm -Rf /tmp/configs/var/named*

  find -L /tmp/configs -type f -iname "*.sh" -exec chmod 755 {} \;
  find -L /tmp/configs -type f -iname "*.pl" -exec chmod 755 {} \;
  find -L /tmp/configs -type f -iname "*.cgi" -exec chmod 755 {} \;
  find -L /tmp/configs -type f -exec sed -i "s#myserverdomainname#$(hostname -f)#g" {} \;
  find -L /tmp/configs -type f -exec sed -i "s#myhostnameshort#$(hostname -s)#g" {} \;
  find -L /tmp/configs -type f -exec sed -i "s#mydomainname#$domainname#g" {} \;

  cp -Rf /tmp/configs/{etc,root,usr,var}* / 2>/dev/null

  mkdir -p /etc/rsync.d /var/log/named && chown -Rf named:named /etc/named* /var/named /var/log/named

  sed -i "s#myserverdomainname#$HOSTNAME#g" /etc/sysconfig/network
  sed -i "s#mydomain#$domainname#g" /etc/sysconfig/network

  grep '^kernel.domainname' '/etc/sysctl.conf' || echo "kernel.domainname=$domainname" >>/etc/sysctl.conf

  chmod 644 -Rf /etc/cron.d/* /etc/logrotate.d/*

  if [ ! -f "/etc/postfix/.installed" ]; then
    touch /etc/postfix/mydomains.pcre
    postmap /etc/postfix/transport /etc/postfix/canonical /etc/postfix/virtual /etc/postfix/mydomains && newaliases
    chattr +i /etc/resolv.conf
  fi
  touch "/etc/postfix/.installed"

  rm -Rf /tmp/*.tar /tmp/dotfiles /tmp/configs /root/bin/linuxcounter.sh
  echo -e "Done configuring files\n"

  echo -e "Setting up web server"
  bash -c "$(curl -LSs https://github.com/casjay-templates/default-web-assets/raw/main/setup.sh)"
  if [ -f "/var/lib/tor/hidden_service/hostname" ]; then
    cp -Rf "/var/lib/tor/hidden_service/hostname" "/var/www/html/tor_hostname"
  fi
  chown -Rf apache:apache "/var/www" "/usr/share/httpd"
  echo -e "Done setting up web server\n"

  echo -e "Updating motd and issue files"
  mkdir -p /etc/casjaysdev/banners &>/dev/null
  chmod -f 777 /etc/casjaysdev /etc/casjaysdev/banners/ /etc/casjaysdev/banners/* &>/dev/null
  cmd_exists update-motd && update-motd &>/dev/null
  echo -e "Done updating motd and issue files \n"

  echo -e "Setting up the ssl certs"
  [ -f "/etc/named/certbot-update.conf" ] && chmod 600 /etc/named/certbot-update.conf
  if [[ -d /etc/letsencrypt/live/domain ]]; then
    cat /etc/letsencrypt/live/domain/fullchain.pem >/etc/cockpit/ws-certs.d/1-my-cert.cert
    cat /etc/letsencrypt/live/domain/privkey.pem >>/etc/cockpit/ws-certs.d/1-my-cert.cert
  fi
  update-ca-trust && update-ca-trust extract
  echo -e "Done setting up the ssl certs\n"

  echo -e "Setting up ip addresses"
  /root/.local/bin/root_changeip.sh
  echo -e "Done setting up ip addresses\n"

  echo -e "System Files have been updated\n"

  echo -e "Setting up the services"
  for s in $SERVICES_ENABLE; do systemctl enable $s >/dev/null 2>&1; done
  for s in $SERVICES_ENABLE; do systemctl restart $s >/dev/null 2>&1; done
  for s in $SERVICES_DISABLE; do systemctl disable $s >/dev/null 2>&1; done
  echo -e "Done setting up the services\n"

  echo -e "Updating systemmgr config"
  systemmgr update script ssl ssh &>/dev/null
  echo -e "Done updating systemmgr config\n"

  if [ -d "$HOME/dns" ] && [ -f "$HOME/dns/master/update.sh" ]; then
    echo -e "Setting up the dns server"
    bash -c "$HOME/dns/master/update.sh"
    systemctl enable --now named &>/dev/null
    echo -e "Setting up the dns server"
  fi
  echo -e "Cleaning up files and history"
  sleep 1 && history -c && history -w && /root/.local/bin/root_clean.sh
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
